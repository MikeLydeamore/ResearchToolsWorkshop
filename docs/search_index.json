[["index.html", "Reproducibility is you(R) responsibility Chapter 1 About 1.1 Today I will cover‚Ä¶", " Reproducibility is you(R) responsibility Michael Lydeamore 2022-04-20 Chapter 1 About This is a sample book written in Markdown. You can use anything that Pandoc‚Äôs Markdown supports; for example, a math equation \\(a^2 + b^2 = c^2\\). 1.1 Today I will cover‚Ä¶ RStudio and RStudio Projects Avoiding dependency hell with renv Reproducible and automatically updating workflows with targets R markdown structure "],["rstudio-and-rstudio-projects.html", "Chapter 2 RStudio and RStudio Projects 2.1 RStudio 2.2 RStudio Default Options 2.3 Rstudio Projects 2.4 Projects, with a capital P 2.5 Making sure you‚Äôre in the right place", " Chapter 2 RStudio and RStudio Projects Much of this section is taken from Nick Tierney‚Äôs excellent book R Markdown for Scientists. Here, we will: Look at the structure of an RStudio window, Set some useful default options for RStudio, Create our first RStudio project 2.1 RStudio R is a programming language, like python, or C. One can write R code in whatever they feel like: Notepad, VSCode, punch card (theoretically). But, one of the most popular ways to write R code is using the RStudio IDE. An Integrated Development Environment (IDE) is just a neat program that helps you write code more accurately and faster. RStudio has been around for a long time, and has a lot of R-specific features to help you write solid R code. You should both R and RStudio installed already. If you open RStudio, you‚Äôll be presented with a window something like this: Figure 2.1: A screenshot of the RStudio working environment. Image from https://rmd4sci.njtierney.com/rstudio-what-and-why.html. Top left is the source window - this is where your scripts or markdown files will sit to be edited. Bottom left is the console, where your code is executed. It also has an integrated terminal which can be useful for running certain specific tasks. Top right is the ‚ÄúViewer,‚Äù which has a file browser, plot viewer, help window and a handful of other tabs. If you draw a plot in the console it will appear here for example. Bottom right is the ‚ÄúEnvironment‚Äù pane, which will list all the variables you have loaded currently, the history of your previous commands, and a handful of other things such as version control, build tools and database connections. 2.1.1 Exercise 2.1 Open up the RStudio preferences (Tools &gt; Global Options), and change the layout of your panes! You can arrange them whatever way you like. 2.2 RStudio Default Options RStudio by default is very helpful. It will keep items in your environment if you quit (or crash, usually), and reload them when you re-open RStudio. However, this can be a bit of a reproducibility nightmare. So, we will turn them off. Go to the RStudio preferences (Tools &gt; Global Options), and set the following: Workspace: Uncheck ‚ÄúRestore .Rdata into workspace upon startup‚Äù Save workspace .Rdata on exit: ‚ÄúNever.‚Äù History: Uncheck ‚ÄúRemove duplicate entries in history‚Äù Some people will suggest unchecking ‚ÄúAlways save history (even when not saving .Rdata),‚Äù but I have found personally I rely on history a lot and so not saving that causes more problems than it‚Äôs worth. Your mileage may vary. I‚Äôd also recommend changing the colour scheme to a less retina burning white. My personal favourite is Cobalt currently. 2.3 Rstudio Projects Now that we have our RStudio set up nicely, it‚Äôs time to start work on our project! Not so fast! We should think about how we will arrange our files. A bit of time now will save us a lot of pain later. As someone who has experienced a lot of file management related pain, I cannot stress this enough. 2.3.1 Never use setwd()* *(almost never anyway) It is the least transportable way to set where R is currently looking for files. For example, think about this piece of code: setwd(&quot;/Users/mlyd0001/projects/ResearchToolsWorkshop&quot;) read_csv(&quot;data/mtcars.csv&quot;) This will set the working directory to this workshop, and then load in a CSV I have saved in. Works fine for me. But, what if Mitch would like to work from the same data I‚Äôm using? No problem he can just download my materials and run the script. Error in setwd(&quot;/Users/mlyd0001/projects/ResearchToolsWorkshop&quot;) : cannot change working directory Oh. Why would that be? Well, Mitch isn‚Äôt mlyd0001, and so that folder simply doesn‚Äôt exist on their computer. So straight away, my collaborator will have to go and edit the script, which when they send it back to me, will just error on my end! Perhaps Jenny Bryan feels a bit too strongly about this concept, but: If the first line of your R script is setwd(\"C:\\\\Users\\\\jenny\\\\path\\\\that\\\\only\\\\I\\\\have\") I will come into your office and SET YOUR COMPUTER ON FIRE üî•. And while I won‚Äôt set your computer on fire, I will edit all your code to remove it before I send it back to you, and probably passive-aggressively mention it in my response. 2.3.2 Project structure At the end of the day, how you structure your project is up to you (except for setwd(), that isn‚Äôt up to you). But, we should keep all our files organised in one, top-level folder. My personal structure looks something like this: project_name ‚îî‚îÄ‚îÄ R/ ‚îî‚îÄ‚îÄ various .R files, usually functions ‚îî‚îÄ‚îÄ data/ ‚îî‚îÄ‚îÄ whatever data files I happen to need ‚îî‚îÄ‚îÄ outputs/ ‚îî‚îÄ‚îÄ figures/ ‚îî‚îÄ‚îÄ tables/ ‚îî‚îÄ‚îÄ libraries.R ‚îî‚îÄ‚îÄ pipeline.R If it is, then I will break up pipeline.R into multiple files, to produce the given outputs. But it is critical that the pipeline (or it‚Äôs subfiles) run from top to bottom in a clean R session. The clean R session is important, as it will ensure you‚Äôre not accidentally relying on anything left over in your Environment (remember the option we changed earlier about saving the .Rdata?) and it means that when your collaborator runs the file you know it will run from the top. A handy trick to source all your functions in the pipeline is to use the following: invisible(lapply(list.files(&quot;R/&quot;, pattern = &quot;*.R&quot;, full.names = T), source)) Just remember to re-source if you edit and save. 2.4 Projects, with a capital P So far, we‚Äôve talked about project structure in an ‚Äòinformal‚Äô sense. RStudio takes it a step further, with a formal ‚ÄúProject‚Äù (the P is capitalised on purpose). These projects do a few things: Store project specific settings Project-specific .Rhistory, .Rprofile and a handful of others Add a handy little piece of text on your RStudio icon Store it‚Äôs own history Set your working directory to the project-specific top level folder. They‚Äôre pretty neat. They also come with their own file, ending in .Rproj, which you can open directly to open the project in RStudio instead of loading through the menu. RStudio Projects are specific to RStudio. If you change IDE or choose not to use RStudio, they will not do anything. Other IDEs do have similar concepts: VSCode has ‚Äúworkspaces,‚Äù PyCharm has ‚Äúideas,‚Äù but they are not cross-compatible. 2.4.1 Exercise 2.4 Set up an RStudio Project for this workshop! Go to File &gt; New Project. Usually you‚Äôll be in ‚ÄúNew directory,‚Äù then New project. When you name a project, I think it‚Äôs always worth taking a little bit of time to think of a nice name. For analysis projects (that aren‚Äôt software release based), I tend to just use descriptive names, like ‚ÄúResearchToolsWorkshop.‚Äù Good names will make it easy to find your things years later. The best names apparently: are short do not use spaces cleverly combine words 2.5 Making sure you‚Äôre in the right place While we‚Äôre working in an RStudio Package, it‚Äôs unlikely we‚Äôll need to change our working directory. But it can happen sometimes - maybe we are working on a remote server, or one of our ‚Äúcollaborators‚Äù has left in a pesky setwd() call again. We can ensure we‚Äôre loading data from the right place using the handy package here. The job of here is simple. The function here::here() uses some magic1 to determine where our project root is. Here is my path: here::here() ## [1] &quot;/Users/mlyd0001/projects/ResearchToolsWorkshop&quot; And if I wanted to load some data, I could use here::here(&quot;data/people_who_have_used_setwd.csv&quot;) ## [1] &quot;/Users/mlyd0001/projects/ResearchToolsWorkshop/data/people_who_have_used_setwd.csv&quot; and then no matter how many people have changed working directory on me, here will resolve back to the top-level folder. The extra nice thing about here is that it will work even if we‚Äôre not in an RStudio project. The types of files it searches are more than .Rproj and so it will work in almost all contexts and IDEs. not actually magic, just an algorithm and a specific set of files. See https://github.com/r-lib/rprojroot for more info.‚Ü©Ô∏é "],["avoiding-dependency-hell-with-renv.html", "Chapter 3 Avoiding dependency hell with renv 3.1 What is dependency hell? 3.2 renv basics and quick-start 3.3 What is a lockfile, anyway? 3.4 Practice time", " Chapter 3 Avoiding dependency hell with renv Here we will: Learn about dependency hell Learn how to avoid dependency hell with renv Set up our own isolated package environment. 3.1 What is dependency hell? Have you ever downloaded someone else‚Äôs code from a long time ago, and it relies on packages for a version of R 12 years ago? Have you then tried to install these old versions of packages only to be met with an error telling you you can‚Äôt downgrade that package because 26 other packages rely on it? (I‚Äôm looking at you rlang) This is what is termed dependency hell. As always, there is an XKCD for that (Figure 3.1). It happens when there is a complex series of dependencies, often many loops, and occasionally different version requirements. R is surprisingly OK with this sort of thing, but if you have a lot of projects (and particularly old ones), then dependency hell can be a real issue. Figure 3.1: As always, there‚Äôs an XKCD for that. Image from https://xkcd.com/1987/. We can avoid dependency hell for our projects by creating isolated, fixed environments for our packages. The RStudio team have developed the package renv to help with exactly that. renv effectively creates a local library for your project, and ensures that libraries are only loaded from that local source, rather than from a single, global source, as is the default. This means that you can have different versions of packages installed for different projects, without any conflicts. 3.2 renv basics and quick-start We start by installing and initialising the project library: install.packages(&quot;renv&quot;) library(renv) renv::init() You will get a message something like: * Initializing project ... * Discovering package dependencies ... Done! * Copying packages into the cache ... Done! Lockfile written to ‚Äò~/projects/ResearchToolsWorkshop/renv.lock.‚Äô Restarting R session‚Ä¶ and there may be a big list of packages that have been detected automatically. From now on, the basic set up is to install a package using renv::install(), just as we would do normally. If installation succeeds, we call renv::snapshot(), and the versions of our packages are saved into the lockfile. If we need to revert our packages, or install somewhere else, we can call renv::restore() and all the packages will be installed (at the correct versions), and we can be on our merry way. 3.3 What is a lockfile, anyway? The lockfile contains all in the information for the packages in the current environment. It is a JSON file, and human readable. Here‚Äôs the entry for the version of knitr used in this book: &quot;knitr&quot;: { &quot;Package&quot;: &quot;knitr&quot;, &quot;Version&quot;: &quot;1.37&quot;, &quot;Source&quot;: &quot;Repository&quot;, &quot;Repository&quot;: &quot;CRAN&quot;, &quot;Hash&quot;: &quot;a4ec675eb332a33fe7b7fe26f70e1f98&quot;, &quot;Requirements&quot;: [ &quot;evaluate&quot;, &quot;highr&quot;, &quot;stringr&quot;, &quot;xfun&quot;, &quot;yaml&quot; ] } There‚Äôs a good amount of information in here. The name of the package, the version, where it came from (CRAN in this case), as well as the dependencies (or ‚Äúrequirements‚Äù). There‚Äôs also a ‚Äúhash,‚Äù which is the md5sum which will be unique to the zip file downloaded as part of the installation process. We don‚Äôt need to worry too much about it, it‚Äôs just another error checking step available. Importantly, because the lockfile is plaintext, it is easily managed in version control. More on that later‚Ä¶ 3.4 Practice time Inside the RStudio Project we made in the previous chapter, let‚Äôs initialise a renv environment. install.packages(&quot;renv&quot;) library(renv) renv::init() renv::install(&quot;tidyverse&quot;) renv::snapshot() "],["rmarkdown-basics.html", "Chapter 4 RMarkdown basics 4.1 What is RMarkdown?", " Chapter 4 RMarkdown basics Here, we will: Learn what an RMarkdown document is Write some markdown and combine it with R code Compile to HTML, PDF and Word 4.1 What is RMarkdown? To understand the purpose pf RMarkdown, we should first take a look at the ‚Äútraditional‚Äù scientific writing process. 4.1.1 The traditional writing process Usually, you will load the data, write the scripts to do the analysis, save some figures, and get to writing. If you‚Äôre a mathematician or computer scientist, you‚Äôll write in LaTeX, if you‚Äôre not you‚Äôll probably use Word. When you write out your tables, if you‚Äôre like me, you‚Äôll painstakingly copy/paste numbers from the console into the document, and hope you get the row right. Then, when your work is done, and the reviews come back, they‚Äôve asked you to add a term to the model. No problem, you say. You add your model term, update the tables, resubmit, ba da bing, ba da boom. Except you forgot the figure! Sigh. 4.1.2 Enter RMarkdown Markdown is a basic ‚Äúmarkup‚Äù language. You write plain text, and a compiler will convert it into HTML for display. RMarkdown combines R with markdown, and allows you to embed code into your writing. It‚Äôs the future! Now, you can write your paper and include the code to make the figures or the models, and then when Reviewer 2 comes and asks for an extra term, nothing will be forgotten. RMarkdown could be considered literate programming. That is, the combination of literature and programming, a concept first introduced by Donald Knuth. RMarkdown documents can be compiled into HTML, PDF or Word documents. I recommend working with HTML for now, spending time messing about with Word and PDF formatting tends to be wasted time unless the document is almost final. We‚Äôll spend a lot more time today about RMarkdown, but for now, let‚Äôs compile a little document of our own. --- title: &quot;Plotting mtcars&quot; author: &quot;Michael Lydeamore&quot; output: html_document --- `mtcars` is a dataset included with R, characterising the fuel efficiencies of cars with some covariates. ```r head(mtcars) plot(mtcars$mpg, mtcars$cyl) ``` This should produce a small report that looks something like this: 4.1.3 Exercise Copy the above RMarkdown code into a blank document, and ‚ÄúKnit‚Äù to HTML, PDF and Word. If you get an error compiling to PDF, you might have to install the tinytex package. "]]
