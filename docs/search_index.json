[["index.html", "Reproducibility is you(R) responsibility Chapter 1 About 1.1 Usage", " Reproducibility is you(R) responsibility Michael Lydeamore 2022-04-20 Chapter 1 About This is a sample book written in Markdown. You can use anything that Pandoc’s Markdown supports; for example, a math equation \\(a^2 + b^2 = c^2\\). 1.1 Usage RStudio and RStudio Projects Avoiding dependency hell with renv Reproducible and automatically updating workflows with targets R markdown structure "],["rstudio-and-rstudio-projects.html", "Chapter 2 RStudio and RStudio Projects", " Chapter 2 RStudio and RStudio Projects "],["avoiding-dependency-hell-with-renv.html", "Chapter 3 Avoiding dependency hell with renv 3.1 renv basics and quick-start 3.2 What is a lockfile, anyway? 3.3 Practice time", " Chapter 3 Avoiding dependency hell with renv Have you ever downloaded someone else’s code from a long time ago, and it relies on packages for a version of R 12 years ago? Have you then tried to install these old versions of packages only to be met with an error telling you you can’t downgrade that package because 26 other packages rely on it? (I’m looking at you rlang) This is what is termed dependency hell. As always, there is an XKCD for that (Figure 3.1). It happens when there is a complex series of dependencies, often many loops, and occasionally different version requirements. R is surprisingly OK with this sort of thing, but if you have a lot of projects (and particularly old ones), then dependency hell can be a real issue. Figure 3.1: As always, there’s an XKCD for that. Image from https://xkcd.com/1987/. We can avoid dependency hell for our projects by creating isolated, fixed environments for our packages. The RStudio team have developed the package renv to help with exactly that. renv effectively creates a local library for your project, and ensures that libraries are only loaded from that local source, rather than from a single, global source, as is the default. This means that you can have different versions of packages installed for different projects, without any conflicts. 3.1 renv basics and quick-start We start by installing and initialising the project library: install.packages(&quot;renv&quot;) library(renv) renv::init() You will get a message something like: * Initializing project ... * Discovering package dependencies ... Done! * Copying packages into the cache ... Done! * Lockfile written to &#39;~/projects/ResearchToolsWorkshop/renv.lock&#39;. Restarting R session... and there may be a big list of packages that have been detected automatically. From now on, the basic set up is to install a package using renv::install(), just as we would do normally. If installation succeeds, we call renv::snapshot(), and the versions of our packages are saved into the lockfile. If we need to revert our packages, or install somewhere else, we can call renv::restore() and all the packages will be installed (at the correct versions), and we can be on our merry way. 3.2 What is a lockfile, anyway? The lockfile contains all in the information for the packages in the current environment. It is a JSON file, and human readable. Here’s the entry for the version of knitr used in this book: &quot;knitr&quot;: { &quot;Package&quot;: &quot;knitr&quot;, &quot;Version&quot;: &quot;1.37&quot;, &quot;Source&quot;: &quot;Repository&quot;, &quot;Repository&quot;: &quot;CRAN&quot;, &quot;Hash&quot;: &quot;a4ec675eb332a33fe7b7fe26f70e1f98&quot;, &quot;Requirements&quot;: [ &quot;evaluate&quot;, &quot;highr&quot;, &quot;stringr&quot;, &quot;xfun&quot;, &quot;yaml&quot; ] } There’s a good amount of information in here. The name of the package, the version, where it came from (CRAN in this case), as well as the dependencies (or “requirements”). There’s also a “hash,” which is the md5sum which will be unique to the zip file downloaded as part of the installation process. We don’t need to worry too much about it, it’s just another error checking step available. Importantly, because the lockfile is plaintext, it is easily managed in version control. More on that later… 3.3 Practice time Inside the RStudio Project we made in the previous chapter, let’s initialise a renv environment. install.packages(&quot;renv&quot;) library(renv) renv::init() renv::install(&quot;tidyverse&quot;) renv::snapshot() "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
